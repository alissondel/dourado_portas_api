# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthInput {
  email: String!
  password: String!
}

type AuthType {
  token: String!
  user: User!
}

type Brand {
  active: Boolean!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: Int!
  updatedAt: DateTime
}

type City {
  active: Boolean!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  name: String!
  state: State!
  state_id: Int!
  updatedAt: DateTime
}

input CreateBrandInput {
  active: Boolean = true
  createdAt: DateTime
  description: String!
}

input CreateCityInput {
  active: Boolean = true
  createdAt: DateTime
  name: String!
  state_id: Int!
}

input CreateGroupInput {
  active: Boolean = true
  createdAt: DateTime
  description: String!
}

input CreateProductInput {
  active: Boolean = true
  brand_id: Int!
  code: String!
  color: String!
  createdAt: DateTime
  description: String!
  frameWidth: Float!
  group_id: Int!
  height: Float!
  length: Float!
  price: Float!
  subgroup_id: Int!
  thickness: Float!
  typeWood: String!
  unity: Float!
  warranty: String!
  weight: Float!
  width: Float!
}

input CreateStateInput {
  active: Boolean = true
  createdAt: DateTime
  name: String!
  uf: String!
}

input CreateSubgroupInput {
  active: Boolean = true
  createdAt: DateTime
  description: String!
}

input CreateUserInput {
  active: Boolean = true
  city_id: Int!
  createdAt: DateTime
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FilterBrandInput {
  active: Boolean
  createdAt: DateTime
  description: String
  id: Int
  order: OrderByFilterInput
  updatedAt: DateTime
}

input FilterCityInput {
  active: Boolean
  createdAt: DateTime
  id: Int
  name: String
  order: OrderByFilterInput
  state: String
  updatedAt: DateTime
}

input FilterGroupInput {
  active: Boolean
  createdAt: DateTime
  description: String
  id: Int
  order: OrderByFilterInput
  updatedAt: DateTime
}

input FilterProductInput {
  active: Boolean
  code: String
  color: String
  createdAt: DateTime
  description: String
  frameWidth: Float
  height: Float
  id: Int
  id_brand: Int
  id_group: Int
  id_subgroup: Int
  length: Float
  order: OrderByFilterInput
  price: Float
  state: String
  thickness: Float
  typeWood: String
  unity: Float
  updatedAt: DateTime
  warranty: String
  weight: Float
  width: Float
}

input FilterStateInput {
  active: Boolean
  createdAt: DateTime
  id: Int
  name: String
  order: OrderByFilterInput
  uf: String
  updatedAt: DateTime
}

input FilterSubgroupInput {
  active: Boolean
  createdAt: DateTime
  description: String
  id: Int
  order: OrderByFilterInput
  updatedAt: DateTime
}

input FilterUserInput {
  active: Boolean
  city_id: Float
  createdAt: DateTime
  email: String
  id: Int
  name: String
  order: OrderByFilterInput
  password: String
  phoneNumber: String
  updatedAt: DateTime
}

type Group {
  active: Boolean!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: Int!
  updatedAt: DateTime
}

type Mutation {
  authenticate(data: AuthInput!): AuthType!
  createBrand(data: CreateBrandInput!): Brand!
  createCity(data: CreateCityInput!): City!
  createGroup(data: CreateGroupInput!): Group!
  createProduct(data: CreateProductInput!): Product!
  createState(data: CreateStateInput!): State!
  createSubgroup(data: CreateSubgroupInput!): Subgroup!
  createUser(data: CreateUserInput!): User!
  deleteBrand(id: Float!): Brand!
  deleteCity(id: Float!): City!
  deleteGroup(id: Float!): Group!
  deleteProduct(id: Float!): Product!
  deleteState(id: Float!): State!
  deleteSubgroup(id: Float!): Subgroup!
  deleteUser(id: Float!): User!
  updateBrand(data: UpdateBrandInput!, id: Float!): Brand!
  updateCity(data: UpdateCityInput!, id: Float!): City!
  updateGroup(data: UpdateGroupInput!, id: Float!): Group!
  updateProduct(data: UpdateProductInput!, id: Float!): Product!
  updateState(data: UpdateStateInput!, id: Float!): State!
  updateSubgroup(data: UpdateSubgroupInput!, id: Float!): Subgroup!
  updateUser(data: UpdateUserInput!, id: Float!): User!
}

input OrderByFilterInput {
  key: String! = "id"
  prefix: String
  value: String! = "ASC"
}

type PageInfo {
  count: Int!
  currentPage: Int!
  pagesCount: Int!
  perPage: Int!
}

type PaginatedBrandResponse {
  items: [Brand!]!
  pagination: PageInfo!
}

type PaginatedCityResponse {
  items: [City!]!
  pagination: PageInfo!
}

type PaginatedGroupResponse {
  items: [Group!]!
  pagination: PageInfo!
}

type PaginatedProductResponse {
  items: [Product!]!
  pagination: PageInfo!
}

type PaginatedStateResponse {
  items: [State!]!
  pagination: PageInfo!
}

type PaginatedSubgroupResponse {
  items: [Subgroup!]!
  pagination: PageInfo!
}

type PaginatedUserResponse {
  items: [User!]!
  pagination: PageInfo!
}

type Product {
  active: Boolean!
  brand: Brand!
  brand_id: Int!
  code: String!
  color: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  frameWidth: Float!
  group: Group!
  group_id: Int!
  height: Float!
  id: Int!
  length: Float!
  price: Float!
  subgroup: Subgroup!
  subgroup_id: Int!
  thickness: Float!
  typeWood: String!
  unity: Float!
  updatedAt: DateTime
  warranty: String!
  weight: Float!
  width: Float!
}

type Query {
  brand(id: Float!): Brand!
  brands(currentPage: Int = 1, filters: FilterBrandInput!, perPage: Int = 10): PaginatedBrandResponse!
  cities(currentPage: Int = 1, filters: FilterCityInput!, perPage: Int = 10): PaginatedCityResponse!
  city(id: Float!): City!
  group(id: Float!): Group!
  groups(currentPage: Int = 1, filters: FilterGroupInput!, perPage: Int = 10): PaginatedGroupResponse!
  product(id: Float!): Product!
  products(currentPage: Int = 1, filters: FilterProductInput!, perPage: Int = 10): PaginatedProductResponse!
  state(id: Float!): State!
  states(currentPage: Int = 1, filters: FilterStateInput!, perPage: Int = 10): PaginatedStateResponse!
  subgroup(id: Float!): Subgroup!
  subgroups(currentPage: Int = 1, filters: FilterSubgroupInput!, perPage: Int = 10): PaginatedSubgroupResponse!
  user(id: Float!): User!
  userByEmail(email: String!): User!
  users(currentPage: Int = 1, filters: FilterUserInput!, perPage: Int = 10): PaginatedUserResponse!
}

type State {
  active: Boolean!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: Int!
  name: String!
  uf: String!
  updatedAt: DateTime!
}

type Subgroup {
  active: Boolean!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: Int!
  updatedAt: DateTime
}

input UpdateBrandInput {
  description: String!
  updatedAt: DateTime
}

input UpdateCityInput {
  name: String!
  state_id: Int!
  updatedAt: DateTime
}

input UpdateGroupInput {
  description: String!
  updatedAt: DateTime
}

input UpdateProductInput {
  brand_id: Int
  code: String
  color: String
  description: String
  frameWidth: Float
  group_id: Int
  height: Float
  length: Float
  price: Float
  subgroup_id: Int
  thickness: Float
  typeWood: String
  unity: Float
  updatedAt: DateTime
  warranty: String
  weight: Float
  width: Float
}

input UpdateStateInput {
  name: String!
  uf: String!
  updatedAt: DateTime
}

input UpdateSubgroupInput {
  description: String!
  updatedAt: DateTime
}

input UpdateUserInput {
  city_id: Int!
  email: String!
  name: String!
  password: String!
  phoneNumber: String!
  updatedAt: DateTime
}

type User {
  active: Boolean!
  city: City!
  city_id: Int!
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String!
  id: Float!
  name: String!
  password: String!
  phoneNumber: String!
  updatedAt: DateTime!
}